{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/*\r\nLos componentes consumen servicios; es decir, puede inyectar un servicio en un componente, dándole acceso al componente a ese servicio.\r\n\r\nUna aplicación real buscará héroes de un servidor remoto, que es una operación inherentemente asincrónica.\r\n\r\nEn este tutorial, HeroService.getHeroes() devolverá un Observable porque eventualmente usará el método angular HttpClient.get para buscar a los héroes y HttpClient.get() devuelve un Observable.\r\n\r\nobservable\r\nUn Ordenador de múltiples valores, que empuja a suscriptores. Se utiliza para el manejo de eventos asíncronos en todo Angular. Ejecutas un observable suscribiéndote con su método subscribe(), pasando devoluciones de llamada para notificaciones de nuevos valores, errores o finalización.\r\n*/\n//Meter el mensage service para que funcione getOrdenadoresApi IMPORTANTE\n\nexport let OrdenadorService = /*#__PURE__*/(() => {\n  class OrdenadorService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.url2 = 'https://mi-1api-rest.herokuapp.com/ordenadores';\n      this.url3 = 'https://mi-1api-rest.herokuapp.com/ordenadormod';\n      this.url4 = 'https://mi-1api-rest.herokuapp.com/ordenadorN';\n      this.url5 = 'https://mi-1api-rest.herokuapp.com/ordenadorB';\n    }\n\n    getOrdenadoresApi() {\n      this.messageService.add('Cargamos los documentos');\n      return this.http.get(this.url2);\n    }\n    /**update**/\n\n\n    updateOrdenador(doc) {\n      console.log('en update');\n      console.log(doc);\n      const url2Id = `${this.url3}/${doc.modelo}`;\n      return this.http.post(url2Id, doc);\n    }\n    /** DELETE*/\n\n\n    deleteOrdenador(ordenador) {\n      const url5 = `https://mi-1api-rest.herokuapp.com/ordenadorB/${ordenador._modelo}`;\n      return this.http.get(url5);\n    }\n    /** POST **/\n\n\n    nuevoOrdenadorPost(doc) {\n      return this.http.post(this.url4, doc);\n    }\n    /*Ordenador por su modelo */\n\n\n    getOrdenador(modelo) {\n      const url2 = `https://mi-1api-rest.herokuapp.com/ordenador/${modelo}`;\n      return this.http.get(url2);\n    }\n\n  }\n\n  OrdenadorService.ɵfac = function OrdenadorService_Factory(t) {\n    return new (t || OrdenadorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  OrdenadorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdenadorService,\n    factory: OrdenadorService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrdenadorService;\n})();","map":null,"metadata":{},"sourceType":"module"}