{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/*\r\nLos componentes consumen servicios; es decir, puede inyectar un servicio en un componente, dándole acceso al componente a ese servicio.\r\n\r\nUna aplicación real buscará héroes de un servidor remoto, que es una operación inherentemente asincrónica.\r\n\r\nUn Ordenador de múltiples valores, que empuja a suscriptores. Se utiliza para el manejo de eventos asíncronos en todo Angular.\r\nEjecutas un observable suscribiéndote con su método subscribe(), pasando devoluciones de llamada para notificaciones de nuevos valores, errores o finalización.\r\n*/\n\nexport let SobremesaService = /*#__PURE__*/(() => {\n  class SobremesaService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.url2 = 'https://restapi-arintec.herokuapp.com/ordenadoresT';\n      this.url3 = 'https://restapi-arintec.herokuapp.com/ordenadormod';\n      this.url4 = 'https://restapi-arintec.herokuapp.com/ordenadorN';\n      this.url5 = 'https://restapi-arintec.herokuapp.com/ordenadorB';\n    }\n\n    getSobremesasApi() {\n      this.messageService.add('Cargamos los documentos');\n      return this.http.get(this.url2);\n    }\n    /**update**/\n\n\n    updateSobremesa(doc) {\n      console.log('en update');\n      console.log(doc);\n      const url2Id = `${this.url3}/${doc.modelo}`;\n      return this.http.put(url2Id, doc);\n    }\n    /** DELETE*/\n\n\n    deleteSobremesa(sobremesa) {\n      const url5 = `https://restapi-arintec.herokuapp.com/ordenadorB/${sobremesa._modelo}`;\n      return this.http.delete(url5);\n    }\n    /** POST **/\n\n\n    nuevoSobremesaPost(doc) {\n      return this.http.post(this.url4, doc);\n    }\n    /*Ordenador sobremesa por su modelo */\n\n\n    getSobremesa(modelo) {\n      const url2 = `https://restapi-arintec.herokuapp.com/ordenador/${modelo}`;\n      return this.http.get(url2);\n    }\n\n  }\n\n  SobremesaService.ɵfac = function SobremesaService_Factory(t) {\n    return new (t || SobremesaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  SobremesaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SobremesaService,\n    factory: SobremesaService.ɵfac,\n    providedIn: 'root'\n  });\n  return SobremesaService;\n})();","map":null,"metadata":{},"sourceType":"module"}